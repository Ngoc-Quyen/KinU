import { AppDataSource } from '@src/config/data-source'
import BadRequestError from '@src/errors/BadRequestError'
import NotFoundError from '@src/errors/NotFoundError'
import ValidationError from '@src/errors/ValidationError'
import { Account } from '@src/models/Account'
import { Color } from '@src/models/Color'
import { Icon } from '@src/models/Icon'
import { TypeSprinding } from '@src/models/TypeSprinding'
import { validate } from 'class-validator'
import { NextFunction, Request } from 'express'

const typeSprindingRepository = AppDataSource.getRepository(TypeSprinding)
const iconRepository = AppDataSource.getRepository(Icon)
const colorRepository = AppDataSource.getRepository(Color)
const accountRepository = AppDataSource.getRepository(Account)
const creatTypeSprinding = async (req: Request) => {
  try {
    const { name, estimatedAmount, abbreviation, iconId, colorId, userId } =
      req.body
    // TÃ¬m cÃ¡c thá»±c thá»ƒ liÃªn quan
    const icon = await iconRepository.findOne({ where: { id: iconId } })
    const color = await colorRepository.findOne({ where: { id: colorId } })
    const user = await accountRepository.findOne({ where: { id: userId } })
    if (!icon || !color || !user) {
      throw new NotFoundError('Icon Or Color Or User KhÃ´ng tá»“n táº¡i')
    }
    if (!user) {
      throw new NotFoundError('User KhÃ´ng tá»“n táº¡i')
    }
    // Kiá»ƒm tra abbreviation cÃ³ bá»‹ trÃ¹ng khÃ´ng
    const existingTypeSprinding = await typeSprindingRepository.findOne({
      where: { abbreviation, user: { id: userId } }
    })
    if (existingTypeSprinding) {
      throw new ValidationError('KÃ­ tá»± viáº¿t táº¯t Ä‘Ã£ tá»“n táº¡i')
    }
    const typeSprinding = typeSprindingRepository.create({
      name,
      estimatedAmount,
      abbreviation,
      icon,
      color,
      user
    })

    // Validate dá»¯ liá»‡u vá»›i class-validator (Ä‘áº£m báº£o name khÃ´ng rá»—ng)
    const errors = await validate(typeSprinding)
    if (errors.length > 0) {
      throw new BadRequestError('TÃªn bá»‹ rá»—ng')
    }
    // LÆ°u vÃ o database
    const savedTypeSprinding = await typeSprindingRepository.save(typeSprinding)

    return savedTypeSprinding
  } catch (error) {
    throw error
  }
}

//Sá»­a
const updateTypeSprinding = async (id: number, req: Request) => {
  try {
    const { name, estimatedAmount, abbreviation, iconId, colorId } = req.body
    // TÃ¬m kiáº¿m TypeSprinding theo id
    const typeSprinding = await typeSprindingRepository.findOne({
      where: { id },
      relations: ['icon', 'color']
    })
    if (!typeSprinding) {
      throw new NotFoundError('TypeSprinding KhÃ´ng tá»“n táº¡i')
    }

    // Cáº­p nháº­t cÃ¡c thuá»™c tÃ­nh náº¿u cÃ³ dá»¯ liá»‡u
    if (name !== undefined) {
      typeSprinding.name = name
    }
    if (estimatedAmount !== undefined) {
      typeSprinding.estimatedAmount = estimatedAmount
    }
    if (abbreviation !== undefined) {
      typeSprinding.abbreviation = abbreviation
    }

    // TÃ¬m color náº¿u cÃ³ colorId
    if (colorId !== undefined) {
      const color = await colorRepository.findOne({ where: { id: colorId } })
      if (!color) {
        throw new NotFoundError('Color vá»›i colorId KhÃ´ng tá»“n táº¡i')
      }
      typeSprinding.color = color
    }

    // TÃ¬m icon náº¿u cÃ³ iconId
    if (iconId !== undefined) {
      const icon = await iconRepository.findOne({ where: { id: iconId } })
      if (!icon) {
        throw new NotFoundError('Icon vá»›i iconId KhÃ´ng tá»“n táº¡i')
      }
      typeSprinding.icon = icon
    }
    // LÆ°u thay Ä‘á»•i
    const typeSprindingUpdate =
      await typeSprindingRepository.save(typeSprinding)

    return typeSprindingUpdate
  } catch (error) {
    throw error
  }
}

//XÃ³a
const deleteTypeSprinding = async (id: number) => {
  try {
    // TÃ¬m kiáº¿m TypeSprinding theo id
    const typeSprinding = await typeSprindingRepository.findOne({
      where: { id }
    })
    if (!typeSprinding) {
      throw new NotFoundError('TypeSprinding KhÃ´ng tá»“n táº¡i')
    }

    // XÃ³a TypeSprinding
    await typeSprindingRepository.remove(typeSprinding)

    return { message: 'TypeSprinding Ä‘Ã£ Ä‘Æ°á»£c xÃ³a thÃ nh cÃ´ng' }
  } catch (error) {
    throw error
  }
}

const getAllTypeSprindings = async () => {
  try {
    const typeSprindings = await typeSprindingRepository.find({
      relations: ['icon', 'color', 'user']
    })
    return typeSprindings
  } catch (error) {
    throw error
  }
}
const getTypeSprindingById = async (id: number) => {
  try {
    // TÃ¬m TypeSprinding theo ID
    const typeSprinding = await typeSprindingRepository.findOne({
      where: { id },
      relations: ['icon', 'color', 'user']
    })
    console.log('ðŸš€ ~ getTypeSprindingById ~ id:', id)
    if (!typeSprinding) {
      throw new NotFoundError('TypeSprinding khÃ´ng tá»“n táº¡i')
    }
    return typeSprinding
  } catch (error) {
    throw error
  }
}
export const TypeSprindingService = {
  creatTypeSprinding,
  updateTypeSprinding,
  deleteTypeSprinding,
  getAllTypeSprindings,
  getTypeSprindingById
}
